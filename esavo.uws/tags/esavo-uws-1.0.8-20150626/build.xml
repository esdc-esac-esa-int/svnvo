<?xml version="1.0" encoding="UTF-8"?>

<!--
 build.xml
 esavo-uws - UWS Service builing library
-->

<project name="esavo-uws" default="dist" xmlns:cl="antlib:net.jtools.classloadertask" basedir=".">

	<description>ESAVO UWS Service</description>

	<import file="ivy-tasks.xml"/> 
	
 	<!-- Jera Ant task for encoding passwords -->
	<taskdef name="query" classpath="setup/antlibs/JeraAntTasks.jar" classname="com.jera.anttasks.Query" />

	<!-- Included for autocontent deploy -->
	<typedef uri="antlib:net.jtools.classloadertask" resource="net/jtools/classloadertask/antlib.xml">
		<classpath>
			<fileset dir="setup/antlibs/" includes="ant-classloadertask.jar" />
		</classpath>
	</typedef>

	<cl:classloader loader="project">
		<classpath>
			<fileset dir="setup/antlibs" includes="jsch.jar" />
		</classpath>
	</cl:classloader>
	<!-- Included for autocontent deploy -->


   <property file="build.properties"/>
    <property file="build.properties.defaults"/>
    
    <path id="subant.path" />
	
	<fileset id="lib.fileset" dir="${lib.dir}"/>
	
    <path id="build.path">
    	<fileset refid="lib.fileset"/>
    </path>
    
    <path id="test.path">
        <path refid="build.path"/>
        <pathelement location="${build.classes.dir}"/>
    </path>
    
    <target name="all" depends="dist, test, docs, check"
            description="Build, pack, test, document and check the component"/>

    <target name="all_app" depends="dist_app, test_app, docs, check"
            description="Build, pack, test, document and check the component"/>
    
    <target name="clean" depends="ivy-clean-jars" description="Clean up the environment">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
        <delete dir="${final.dir}"/>
    </target>
    
    <target name="init" depends="ivy-retrieve" description="Initialise the environment">
        <tstamp/>
        <mkdir dir="${build.dir}"/>
    </target>
    
    <target name="build" depends="clean,init" description="Compile the java sources">
        <mkdir dir="${build.classes.dir}"/>
        
        <javac srcdir="${java.dir}" destdir="${build.classes.dir}" classpathref="build.path"
               source="${javac.source}" target="${javac.target}" compiler="${javac.compiler}"
               nowarn="${javac.nowarn}" debug="${javac.debug}" deprecation="${javac.deprec}"/>
    </target>

     <target name="dist" depends="build"
            description="Make the distribution files (pack as JAR, WAR, EAR, ...)">
        <mkdir dir="${dist.dir}"/>
        
        <jar destfile="${dist.jar.file}" basedir="${build.classes.dir}"
             compress="${jar.compress}" index="${jar.index}" update="${jar.update}"/>
    </target>

	<target name="final" depends="dist"
	            description="Make the final distribution group of files">
		<mkdir dir="${final.dir}"/>
		<copy todir="${final.dir}" overwrite="true">
         <fileset dir="${lib.dir}">
            <exclude name="junit*" />
            <exclude name="checkstyle*" />
         </fileset>
		  <fileset dir="${dist.dir}"/>
		</copy>
	</target>

    <target name="build_app" depends="clean,init" description="Compile the java sources">
        <mkdir dir="${build.classes.dir}"/>
        
 		<input message="What target do you want to use for deployment? " 
			addproperty="deploy.target" validargs="local,int,dev,op" defaultvalue="local" />
		<property file="build.properties.${deploy.target}" />
		<subant buildpathref="subant.path" target="build" failonerror="true">
			<property name="deploy.target" value="${deploy.target}" />
		</subant>

       <javac srcdir="${java.dir}" destdir="${build.classes.dir}" classpathref="build.path"
               source="${javac.source}" target="${javac.target}" compiler="${javac.compiler}"
               nowarn="${javac.nowarn}" debug="${javac.debug}" deprecation="${javac.deprec}"/>
    </target>
    
    <target name="dist_app" depends="build_app"
            description="Make the distribution files (pack as JAR, WAR, EAR, ...)">
        <mkdir dir="${dist.dir}"/>
        
        <jar destfile="${dist.jar.file}" basedir="${build.classes.dir}"
             compress="${jar.compress}" index="${jar.index}" update="${jar.update}"/>
    </target>


	<target name="final_app" depends="dist_app"
	            description="Make the final distribution group of files">
		<mkdir dir="${final.dir}"/>
		<copy todir="${final.dir}" overwrite="true">
         <fileset dir="${lib.dir}">
            <exclude name="junit*" />
            <exclude name="checkstyle*" />
         </fileset>
		  <fileset dir="${dist.dir}"/>
		</copy>

		<query name="uws.jdbc.dbPwd" message="Please enter password for ${uws.jdbc.dbOwner}@${uws.jdbc.dbServer}/${uws.jdbc.dbName}" password="true" />
		<query name="ldap.pwd" message="Please enter password for LDAP superuser" password="true" />

		<!-- Creating war file -->

		<copy file="${conf.webxml.file}" todir="${build.classes.dir}" />
		<replace file="${build.classes.dir}/web.xml">
			<replacefilter token="@uws.app.id@" value="${uws.app.id}" />
			<replacefilter token="@uws.app.storage_dir@" value="${uws.app.storage_dir}" />
			<replacefilter token="@uws.max_running_jobs@" value="${uws_max_running_jobs}" />
			<replacefilter token="@uws.db.usage@" value="${uws.db.usage}" />
			<replacefilter token="@uws.jdbc.dbServer@" value="${uws.jdbc.dbServer}" />
			<replacefilter token="@uws.jdbc.dbPort@" value="${uws.jdbc.dbPort}" />
			<replacefilter token="@uws.jdbc.dbName@" value="${uws.jdbc.dbName}" />
			<replacefilter token="@uws.jdbc.dbOwner@" value="${uws.jdbc.dbOwner}" />
			<replacefilter token="@uws.jdbc.dbPwd@" value="${uws.jdbc.dbPwd}" />
			<replacefilter token="@uws.db.quota@" value="${uws.db.quota}" />
			<replacefilter token="@uws.files.quota@" value="${uws.files.quota}" />
			<replacefilter token="@uws.exec_duration_limit@" value="${uws.exec_duration_limit}" />
			<replacefilter token="@uws.upload.enabled@" value="${uws.upload.enabled}" />
			<replacefilter token="@uws.upload.max_size@" value="${uws.upload.max_size}" />
			<replacefilter token="@uws.fixed_base_url@" value="${uws.fixed_base_url}" />
			<replacefilter token="@uws.jobs_removal_check_time@" value="${uws.jobs_removal_check_time}" />
			<replacefilter token="@uws.jobs_delta_destruction_time@" value="${uws.jobs_delta_destruction_time}" />
			<replacefilter token="@uws.old_empty_dirs_cmp_time@" value="${uws.old_empty_dirs_cmp_time}" />
			<replacefilter token="@uws.events_removal_check_time@" value="${uws.events_removal_check_time}" />
			<replacefilter token="@uws.events_delta_destruction_time@" value="${uws.events_delta_destruction_time}" />
			<replacefilter token="@uws.notifications_removal_check_time@" value="${uws.notifications_removal_check_time}" />
			<replacefilter token="@uws.notifications_delta_destruction_time@" value="${uws.notifications_delta_destruction_time}" />
			<replacefilter token="@uws.ldap.server@" value="${uws.ldap.server}" />
			<replacefilter token="@uws.ldap.search_base@" value="${uws.ldap.search_base}" />
			<replacefilter token="@uws.ldap.usr@" value="${uws.ldap.usr}" />
			<replacefilter token="@uws.ldap.pwd@" value="${ldap.pwd}" />
			
		</replace>
		<war destfile="${dist.war.file}" webxml="${build.classes.dir}/web.xml" manifest="${conf.manifest.file}" compress="${war.compress}" update="${war.update}">
			<classes dir="${build.classes.dir}" />
			<lib dir="${final.dir}" />
			<webinf dir="${conf.dir}/WEB-INF" includes="*"/>
			<fileset dir="${conf.dir}/web">
			      <include name="**/*.*"/>
			</fileset>
		</war>
	</target>

	<target name="check.local">
        <condition property="isLocal">
            <and>
                <equals arg1="${deploy.target}" arg2="local" trim="true"/>
            </and>
        </condition>
    </target>

	
	<target name="deploy_app.local" depends="final_app, check.local"  if="isLocal">
		<!-- In case you want to use the war file directly -->
	    <copy file="${dist.war.file}" todir="${server.instdir}" overwrite="true"/>
		
		<!-- Create environment for eclipse: for a dynamic web project, use build/classes as output, src/java as source and WebContent as web folder
			do not allow eclipse to generate web.xml
		 -->
		<delete dir="WebContent" />
		<mkdir dir="WebContent" />
		<mkdir dir="WebContent/WEB-INF" />
		<mkdir dir="WebContent/WEB-INF/lib" />
		<mkdir dir="WebContent/META-INF" />
		<copy todir="WebContent" >
			<fileset dir="${conf.dir}/web">
			      <include name="**/*.*"/>
			</fileset>
		</copy>
		<copy todir="WebContent/WEB-INF" >
			<fileset dir="${conf.dir}/WEB-INF" includes="*"/>
		</copy>
		<copy todir="WebContent/WEB-INF/lib">
			<fileset dir="${lib.dir}" includes="*" />
		</copy>
		<copy file="${conf.manifest.file}" todir="WebContent/META-INF" />
		<copy file="${build.classes.dir}/web.xml" tofile="WebContent/WEB-INF/web.xml" overwrite="yes"/>
		
	</target>
	
	<target name="deploy_app.notlocal" depends="final_app, check.local" unless="isLocal">
	   <echo message="Remote copy" />
		<echo message="${server.host}" />
    	<query name="server.password" 
    		message="Please enter password for ${server.user}@${server.host}" 
    	    password="true"/>
	    <scp file="${dist.war.file}" 
	    	todir="${server.user}:${server.password}@${server.host}:${server.instdir}"
                trust="true" verbose="true"/>
	</target>


	<target name="deploy_app" depends="deploy_app.local,deploy_app.notlocal" description="Deploy the application"/>
    

	<target name="build-tests_app" depends="build_app" description="Compiles test code">
		<mkdir dir="${build.testclass.dir}" />
		<javac srcdir="test" includes="**" destdir="${build.testclass.dir}" classpathref="test.path" source="${javac.source}" target="${javac.target}" compiler="${javac.compiler}" nowarn="${javac.nowarn}" debug="${javac.debug}" />

		<copy todir="${build.testclass.dir}">
			<fileset dir="test" />
		</copy>

	</target>

    <target name="test_app" depends="build-tests_app" description="Run the unit tests (using JUnit or other specific tests)">
        <mkdir dir="${build.jureport.dir}"/>
        
		<junit printsummary="${junit.summary}" showoutput="${junit.output}">
			<classpath>
				<path refid="test.path" />
				<pathelement location="${build.testclass.dir}" />
				<pathelement location="${java.dir}" />
				<pathelement location="build/classes" />
			</classpath>
			<test name="esavo.uws.AllTests" todir="${build.jureport.dir}" haltonfailure="no" />

			<formatter type="xml" />
		</junit>

        <junitreport todir="${build.jureport.dir}">
            <fileset dir="${build.jureport.dir}" includes="TEST-*.xml"/>
            <report todir="${build.jureport.dir}"/>
        </junitreport>
    </target>
    
	<target name="build-tests" depends="build" description="Compiles test code">
		<mkdir dir="${build.testclass.dir}" />
		<javac srcdir="test" includes="**" destdir="${build.testclass.dir}" classpathref="test.path" source="${javac.source}" target="${javac.target}" compiler="${javac.compiler}" nowarn="${javac.nowarn}" debug="${javac.debug}" />

		<copy todir="${build.testclass.dir}">
			<fileset dir="test" />
		</copy>

	</target>

    <target name="test" depends="build-tests" description="Run the unit tests (using JUnit or other specific tests)">
        <mkdir dir="${build.jureport.dir}"/>

		<junit printsummary="${junit.summary}" showoutput="${junit.output}">
			<classpath>
				<path refid="test.path" />
				<pathelement location="${build.testclass.dir}" />
				<pathelement location="${java.dir}" />
				<pathelement location="build/classes" />
			</classpath>
			<test name="esavo.uws.AllTests" todir="${build.jureport.dir}" haltonfailure="no" />

			<formatter type="xml" />
		</junit>

        <junitreport todir="${build.jureport.dir}">
            <fileset dir="${build.jureport.dir}" includes="TEST-*.xml"/>
            <report todir="${build.jureport.dir}"/>
        </junitreport>
    	
    </target>
    
    <target name="docs" depends="init"
            description="Generate the API javadoc (and other documentation files)">
        <mkdir dir="${build.javadoc.dir}"/>
        
        <javadoc sourcepath="${java.dir}" destdir="${build.javadoc.dir}"
                 source="${javac.source}" packagenames="${javadoc.packages}"
                 access="${javadoc.access}" failonerror="${javadoc.fail}">
            <classpath refid="build.path"/>
            <link href="http://java.sun.com/j2se/1.4.2/docs/api/"/>
        </javadoc>
    </target>
    
    <target name="check" depends="build"
            description="Check the sources for style violations (and report them)">
        <mkdir dir="${build.csreport.dir}"/>
        <taskdef resource="checkstyletask.properties" classpath="${lib.checkstyle.jar}"/>
        
        <checkstyle config="${checkstyle.config}" failonviolation="${checkstyle.fail}">
            <classpath>
                <path refid="build.path"/>
                <pathelement location="${build.classes.dir}"/>
            </classpath>
            <fileset dir="${java.dir}" includes="**/*.java"/>
            <formatter type="xml" tofile="${build.csreport.dir}/csreport.xml"/>
        </checkstyle>
        
        <xslt basedir="${build.csreport.dir}" includes="*.xml"
              destdir="${build.csreport.dir}" style="${checkstyle.style}">
            <param name="output.dir" expression="${build.csreport.dir}"/>
            <param name="source.dir" expression="${basedir}/${java.dir}/"/>
        </xslt>
    </target>
</project>
